# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/phijul/.oh-my-zsh"

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

# Set list of themes to load
# Setting this variable when ZSH_THEME=random
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

zstyle :omz:plugins:ssh-agent lazy yes


# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  colored-man-pages
  colorize
  command-not-found
  history
  ssh-agent
  fabric
  pip
  python
  virtualenv
  tmux
)

CASE_SENSITIVE="true"
fpath=(~/.local/custom-zsh-completions $fpath)
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#

export EDITOR='vim'
export TERM=xterm-256color
. /opt/philenv.d/set_philenv.sh

export PS1=$'\n'${PS1}$'\n'

setopt append_history
unsetopt share_history
unsetopt caseglob
# unsetopt sharehistory

# don't use less in git

export PATH="/usr/lib/ccache:$PATH"
export PATH="$PATH:/usr/local/go/bin"
export PATH="$PATH:"~/go/bin

# configure conan to adapt to my bright color scheme :
export CONAN_COLOR_DARK=1


# 2022-01-11 = pyenv :
# warning : pyenv instructions are not sufficent, see :
# https://stackoverflow.com/questions/45577194/failed-to-activate-virtualenv-with-pyenv/70307478#70307478
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"


# Customize agnoster by overriding functions :
# use cyan for username@host :
prompt_context() {
  if [[ "$USERNAME" != "$DEFAULT_USER" || -n "$SSH_CLIENT" ]]; then
    prompt_segment cyan default "%(!.%{%F{yellow}%}.)%n@%m"
  fi
}
# use red for virtualenv :
prompt_virtualenv() {
  if [[ -n "$VIRTUAL_ENV" && -n "$VIRTUAL_ENV_DISABLE_PROMPT" ]]; then
    prompt_segment red black "(${VIRTUAL_ENV:t:gs/%/%%})"
  fi
}

# 2022-07 = neovim :
export PATH="$HOME/neovim/bin:$PATH"
alias vim="echo '' ; echo 'UTILISER PLUTÔT NVIM !!!' ; echo '' ; sleep 1 ; nvim"

alias clang-format=clang-format-11

# 2022-11 = bat = https://github.com/sharkdp/bat :
# sous Ubuntu, 'sudo apt install bat' installe "batcat" :
[ ! -e ~/.local/bin/bat ] && ln -s /usr/bin/batcat ~/.local/bin/bat
# bat --list-themes
export BAT_THEME="Coldark-Cold"


# Recherche un fichier dans le répertoire actuel, puis dans tous ses ascendants
function find_config_file()
{
    local SEARCHED_FILE="${1}"
    local SEARCHED_DIR="$(pwd)"
    local NB_ALLOWED_RECURSIONS=10
    _find_config_file "${SEARCHED_FILE}"  "${SEARCHED_DIR}"  "${NB_ALLOWED_RECURSIONS}"
    return $?
}
# Fonction récursive faisant le taf concret de find_config_file
function _find_config_file ()
{
    local SEARCHED_FILE="$1"
    local SEARCHED_DIR="$2"
    local NB_ALLOWED_RECURSIONS="$3"

    [ ! -d "${SEARCHED_DIR}" ]            && return 1  # SEARCHED_DIR is unreachable

    # is the searched file in path ?
    [ -r "${SEARCHED_DIR}/${SEARCHED_FILE}" ] && echo "${SEARCHED_DIR}/${SEARCHED_FILE}" && return 0

    # file is not in the path : should we search in its parent ?
    [ "${SEARCHED_DIR}" = "/" ]           && return 2  # we reached the filesystem's root dir
    [ "${NB_ALLOWED_RECURSIONS}" = 0 ]    && return 3  # max recursions reached
    [ -d "${SEARCHED_DIR}/.git" ]         && return 4  # we reached the project's root dir

    # actually searching the file in parent dir :
    parent="$(dirname -- "$(realpath -- "${SEARCHED_DIR}" )" )"
    _find_config_file "${SEARCHED_FILE}" "${parent}"  "$((NB_ALLOWED_RECURSIONS - 1))"
    return $?
}


# 2023-05 = just :
# la façon dont je veux utiliser just :
#     - si on est dans un répertoire qui contient un de mes justfile custom, c'est celui-ci qu'il faut utiliser
#     - sinon, on utilise le comportement classique de just (chercher un `justfile` dans les répertoires parents)
# Pour bypasser ce comportement, il suffit de bypasser la fonction ci-dessous, en appelant "just" directement.
function j() {
  # attention, ne pas utiliser "local" pour définir cette variable
  # (car ça sette le returncode à 0 au lieu d'utiliser celui de la commande wrappée)
  justfile=$(find_config_file NOGIT_justfile)
  if [ $? -eq 0 ]
  then
    just  --justfile "$justfile" "$@"
  else
    just "$@"
  fi
}

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# 2024-02 = copy/paste depuis le clipboard X :
# cf. https://sweetohm.net/blog/182.html
# nécessite : sudo apt install xsel
# puis :
#   pbcopy < ~/myfile.txt   # le fichier est maintenant copié dans le presse-papier
#   pbpaste                 # moins utile = affiche le contenu du presse-papiers ; équivalent de Ctrl+Shift+V
alias pbcopy='xsel --clipboard --input'
alias pbpaste='xsel --clipboard --output'

# 2024-02 = carapace-bin = completion :
# cf. https://github.com/rsteube/carapace-bin
export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense' # optional
zstyle ':completion:*' format $'\n\e[2;37m==== Completing %d\e[m'
source <(carapace _carapace)
