set -g mouse on
set-window-option -g xterm-keys on
set -g default-terminal "screen-256color"

# utiliser des déplacements vi-like en mode copy :
set-window-option -g mode-keys vi
# see https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/
# note : rectangle only toggles mode, it doesn't begin selection

# EDIT 2021-09-14 = the following options are not compatible with tmux 3.0 :
# bind-key -t vi-copy 'r' rectangle-toggle
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection

# EDIT 2021-09-14 = using these options instead :
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi 'C-v' send -X begin-selection \; send -X rectangle-toggle

# use HOME/END in nvim ; cf. https://github.com/neovim/neovim/issues/6134#issuecomment-758475291
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

# EDIT 2021-02-05 : reduce escape-time to ensure escape usage is vim is still reactive.
# See :
#     https://unix.stackexchange.com/questions/608142/whats-the-effect-of-escape-time-in-tmux
#     https://superuser.com/questions/942677/consequences-of-escape-time-0-tmux-setting
#     https://github.com/tmux/tmux/issues/907
set -sg escape-time 5

# enter copy-mode with S-PageUp, scroll with PageUp/PageDown :
bind-key -T root S-PageUp   copy-mode -u

# remap prefix from 'C-b' to 'C-Space'
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# Alt + arrows to navigate panes (for Left/Right : except when in vim/neovim) :
is_pane_running_vim_or_neovim="ps -o state= -o comm= -t '#{pane_tty}' | grep -q -e '^[SRD ] vim' -e '^[SRD ] nvim'"
bind-key -T root M-Left   if-shell  "$is_pane_running_vim_or_neovim"  "send-keys M-Left"    "select-pane -L"
bind-key -T root M-Right  if-shell  "$is_pane_running_vim_or_neovim"  "send-keys M-Right"   "select-pane -R"
bind-key -T root M-Up   select-pane -U
bind-key -T root M-Down select-pane -D

# Alt + vimkeys to navigate panes :
bind-key -T root M-k  if-shell  "$is_pane_running_vim_or_neovim"  "send-keys M-k"   "select-pane -U"
bind-key -T root M-j  if-shell  "$is_pane_running_vim_or_neovim"  "send-keys M-j"   "select-pane -D"
bind-key -T root M-h select-pane -L
bind-key -T root M-l select-pane -R

# rebind prefixed pane-navigating keys to avoid repeat-mode :
bind-key -T prefix  Up    select-pane -U
bind-key -T prefix  Down  select-pane -D
bind-key -T prefix  Left  select-pane -L
bind-key -T prefix  Right select-pane -R

# pane history :
set-option -g history-limit 30000

# tpm (to install them, use PREFIX + I) :
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

#========================================================================================================================
# THEME (customized from : https://github.com/dmitry-kabanov/tmux-statusline-themes)
#========================================================================================================================
# Tmux status line with solarized light colors.
# Palette: http://ricky.thecampbells.info/solarized-quick-reference-posters/

# Status bar colors.
set-window-option -g status-style fg=black,bg=white,none

# Window list colors.
set-window-option -g window-status-style fg=black,bg=white,none
set-window-option -g window-status-current-style fg=black,bg=brightblue,bold


# Pane divider colors.
set-option -g pane-border-style fg=black,bg=default
set-option -g pane-active-border-style fg=yellow,bg=default

# Command-line messages colors.
set-option -g message-style fg=black,bg=white

# Set left and right sections.
set-option -g status-left-length 30
set-option -g status-left "#[fg=black,bg=brightblue] #S #{prefix_highlight} "
set-option -g status-right "#{prefix_highlight} #[fg=black,bg=brightblue] #H "

# Set format of items in window list.
setw -g window-status-format "    #W    "
setw -g window-status-current-format "#{?window_zoomed_flag,#[bg=green],} ---#W--- "

# Set alignment of windows list.
set-option -g status-justify centre

# Identify activity in non-current windows.
set-window-option -g monitor-activity off
set-option -g visual-activity off

# EDIT 2022-07-15 = only usefule on tmux < 3 :
# Set UTF-8 support in a status line.
# set-option -g status-utf8 on

#========================================================================================================================
# my custom cheatsheet :
#========================================================================================================================

# my cheatsheet (display it with PREFIX+h, shortcut for "help") :
bind-key -T prefix  h \
run-shell "echo " \; \
run-shell "echo 'Pour afficher cette cheatsheet :   PREFIX + h  (pour help)'" \; \
run-shell "echo " \; \
run-shell "echo '======= SESSIONS :'" \; \
run-shell "echo '    PREFIX + d       détacher le client de la session en cours'" \; \
run-shell "echo '    tmux a           rattacher le client à la dernière session détachée'" \; \
run-shell "echo '    tmux a -t SES    rattacher le client à la session nommée SES'" \; \
run-shell "echo '    ta  SES          rattacher le client à la session nommée SES'" \; \
run-shell "echo '    tl               lister les sessions en cours (alias de tmux list-sessions)'" \; \
run-shell "echo '    PREFIX + $       renommer une session'" \; \
run-shell "echo '    PREFIX + s       lister les sessions'" \; \
run-shell "echo '    PREFIX + )       switcher vers la sessions suivante'" \; \
run-shell "echo '    txs SES          démarrer la session SES (alias de tmuxinator start SES)'" \; \
run-shell "echo '    txo SES          éditer la session SES (alias de tmuxinator open SES)'" \; \
run-shell "echo " \; \
\
run-shell "echo " \; \
run-shell "echo '======= WINDOWS :'" \; \
run-shell "echo '    PREFIX + ,       renommer la window courante'" \; \
run-shell "echo '    PREFIX + n/p     jump to next/previous window'" \; \
run-shell "echo '    PREFIX + w       lister les windows et choisir celle à afficher'" \; \
run-shell "echo '    PREFIX + &       killer une window tmux'" \; \
run-shell "echo " \; \
\
run-shell "echo " \; \
run-shell "echo '======= PANES :'" \; \
run-shell "echo '    PREFIX + o       itérer sur les panes'" \; \
run-shell "echo '    PREFIX + ;       jump sur la dernière pane active'" \; \
run-shell "echo '    PREFIX + flèche  jump vers une pane'" \; \
run-shell "echo '    ALT    + flèche  jump vers une pane, shortcut perso (sauf si la pane actuelle contient (n)vim)'" \; \
run-shell "echo '    PREFIX + z       zoomer/dézoomer la pane actuelle'" \; \
run-shell "echo " \; \
\
run-shell "echo " \; \
run-shell "echo '======= COPY-MODE - CORE TMUX :'" \; \
run-shell "echo '    PREFIX + [       entrer en copy-mode'  " \; \
run-shell "echo '    Space            en copy-mode, démarre la sélection'  " \; \
run-shell "echo '    Enter            en copy-mode, termine et copie la sélection dans le paste-buffer'  " \; \
run-shell "echo '    PgUp / PgDown    en copy-mode, scroller'  " \; \
run-shell "echo '    PREFIX + ]       copie le contenu du paste-buffer dans la pane'  " \; \
run-shell "echo '    :save-buffer /path/to/file.txt  = sauvegarde le paste-buffer dans un fichier'  " \; \
run-shell "echo " \; \
\
run-shell "echo " \; \
run-shell "echo '======= COPY-MODE - MY CUSTOM SETUP :'" \; \
run-shell "echo '    S-PgUp           entre en copy-mode + scroller vers le haut'  " \; \
run-shell "echo '    v                en copy-mode, démarre la sélection'  " \; \
run-shell "echo '    V                en copy-mode, démarre la sélection sur toute la ligne courante'  " \; \
run-shell "echo '    y                en copy-mode, termine et copie la sélection dans le paste-buffer'  " \; \
run-shell "echo '    r                en copy-mode, toggle la sélection rectangulaire'  " \; \
run-shell "echo " \; \
\
run-shell "echo " \; \
run-shell "echo '======= DIVERS :'" \; \
run-shell "echo '    Les commandes sont utilisables depuis tmux ou depuis le shell, les deux lignes suivantes sont à peu près équivalentes :'  " \; \
run-shell "echo '        SHELL>  tmux list-keys'  " \; \
run-shell "echo '        TMUX>   :list-keys'  " \; \
run-shell "echo ''  " \; \
run-shell "echo '    man tmux -> section FORMATS          donne les infos sur les variables disponibles'      " \; \
run-shell "echo '    ##{mavariable}                        déréférencer une variable tmux (e.g. ##{pane_id})'      " \; \
run-shell "echo '    :show-options -g                     afficher les options actives'      " \; \
run-shell "echo '    :display-message \"pid = ##{pane_id}\"  afficher un message dans la status-line'      " \; \
\
run-shell "echo " \; \
run-shell "echo " \; \
run-shell "echo Press ENTER or \\'q\\' to continue." \; \

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
